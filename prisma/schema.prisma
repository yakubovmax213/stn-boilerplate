// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_SHADOW_URL")
}

enum MessageRole {
  user
  system
  assistant
}

enum ChatCreativity {
  low
  medium
  high
  super
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?

  messages      Message[]
  categories    UserCategory[]
  chats         UserChat[]
}

model UserChat {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId     String
  chatId     String

  user       User     @relation(fields: [userId], references: [id])
  chat       Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model UserCategory {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId     String
  categoryId String

  user       User     @relation(fields: [userId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  color     String?
  chats     Chat[]
  users     UserCategory[]
}

model Chat {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  title      String
  icon       String
  creativity ChatCreativity

  categoryId String

  messages  Message[]
  users     UserChat[]
  category  Category @relation( fields: [categoryId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  role      MessageRole

  chatId    String
  userId    String?

  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  author    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
